// @use "sass:map";
// @use "sass:math";
// @use "../variables";

// $grid-breakpoints: (
//     sm: 576px,
//     md: 768px,
//     lg: 992px,
//     xl: 1200px,
//     xxl: 1400px,
// ) !default;

// $container-max-widths: (
//     sm: 539px,
//     md: 719px,
//     lg: 959px,
//     xl: 1169px,
//     xxl: 1400px,
// );
// $grid-columns: 12 !default;
// $grid-gutter-width: 30px !default;
// $gutters: (
//     0: 0,
//     1: 0.25,
//     2: 0.5,
//     3: 1,
//     4: 1.5,
//     5: 3,
// );

// %gutter-padding {
//     padding-left: calc(var(--grid-gutter-x) * 0.5);
//     padding-right: calc(var(--grid-gutter-x) * 0.5);
// }

// .container-fluid {
//     --grid-gutter-x: #{$grid-gutter-width};
//     --grid-gutter-y: 0;

//     width: 1370px;
//     margin-left: auto;
//     margin-right: auto;
//     @extend %gutter-padding;
// }

// .container {
//     @extend .container-fluid;
//     width: 1170px;
// }

// .row {
//     display: flex;
//     flex-wrap: wrap;
//     margin-top: calc(var(--grid-gutter-y) * -1);
//     margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
//     margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

//     > * {
//         margin-top: var(--grid-gutter-y);
//         @extend %gutter-padding;
//     }
// }

// .col {
//     flex: 1 0;
// }

// @mixin make-media-query($dimension) {
//     @media (max-width: ($dimension - 0.02)) {
//         @content;
//     }
// }

// @mixin make-row-columns($infix: null) {
//     @for $i from 1 through $grid-columns * 0.5 {
//         .row-cols#{$infix}-#{$i} > * {
//             flex: 0 0 auto;
//             width: math.div(100%, $i);
//         }
//     }
// }

// @mixin make-columns($infix: null) {
//     @for $i from 1 through $grid-columns {
//         .col#{$infix}-#{$i} {
//             flex: 0 0 auto;
//             width: math.div(100%, $grid-columns) * $i;
//         }
//     }
// }

// @mixin make-offsets($infix: null) {
//     @for $i from 0 to $grid-columns {
//         .offset#{$infix}-#{$i} {
//             margin-left: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
//         }
//     }
// }

// @mixin make-gutters($infix: null) {
//     @each $i, $ratio in $gutters {
//         .g#{$infix}-#{$i},
//         .gx#{$infix}-#{$i} {
//             --grid-gutter-x: #{$grid-gutter-width * $ratio};
//         }

//         .g#{$infix}-#{$i},
//         .gy#{$infix}-#{$i} {
//             --grid-gutter-y: #{$grid-gutter-width * $ratio};
//         }
//     }
// }

// @include make-row-columns();

// @include make-columns();

// @include make-offsets();

// @include make-gutters();

// @each $breakpoint, $dimension in variables.$grid-breakpoints {
//     $max-width: map.get($container-max-widths, $breakpoint);
//     $infix: "-#{$breakpoint}";

//     @include make-media-query($dimension) {
//         .container {
//             max-width: $max-width;
//         }

//         @include make-row-columns($infix);

//         @include make-columns($infix);

//         @include make-offsets($infix);

//         @include make-gutters($infix);
//     }
// }

@use "sass:map";
@use "sass:math";
// Giả định bạn có file variables này, nếu không thì có thể định nghĩa trực tiếp
@use "../variables";

// --- CÁC THAY ĐỔI CHÍNH Ở ĐÂY ---

$grid-breakpoints: (
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px // Bạn có thể không cần xxl nếu 1170px là lớn nhất,
) !default;

$container-max-widths: (
    sm: 540px,
    md: 720px,
    lg: 960px,
    xl: 1140px // Gần với 1170px, Bootstrap cũng dùng giá trị này.
    // Hoặc bạn có thể đặt chính xác 1170px ở class .container,
);

$grid-columns: 12 !default;
$grid-gutter-width: 30px !default; // Khoảng cách giữa các cột
$gutters: (
    0: 0,
    1: 0.25,
    2: 0.5,
    3: 1,
    4: 1.5,
    5: 3,
);

// --- CÁC PHẦN CÒN LẠI GIỮ NGUYÊN ---

%gutter-padding {
    padding-left: calc(var(--grid-gutter-x) * 0.5);
    padding-right: calc(var(--grid-gutter-x) * 0.5);
}

.container-fluid,
.container {
    --grid-gutter-x: #{$grid-gutter-width};
    --grid-gutter-y: 0;

    width: 100%; // Chiếm toàn bộ chiều rộng
    margin-left: auto;
    margin-right: auto;
    @extend %gutter-padding;
}

// Chỉnh sửa .container để responsive
.container {
    // Thiết lập cho mobile (màn hình nhỏ hơn sm)
    // Sẽ có padding hai bên từ %gutter-padding

    // Áp dụng max-width cho các màn hình lớn hơn
    @each $breakpoint, $dimension in $grid-breakpoints {
        @media (min-width: $dimension) {
            max-width: map.get($container-max-widths, $breakpoint);
        }
    }

    // Đặt max-width cuối cùng cho desktop
    @media (min-width: 1200px) {
        max-width: 1170px;
    }
}

.row {
    display: flex;
    flex-wrap: wrap;
    margin-top: calc(var(--grid-gutter-y) * -1);
    margin-left: calc(var(--grid-gutter-x) * 0.5 * -1);
    margin-right: calc(var(--grid-gutter-x) * 0.5 * -1);

    > * {
        margin-top: var(--grid-gutter-y);
        @extend %gutter-padding;
    }
}

.col {
    flex: 1 0;
}

// Sử dụng min-width cho media query để tiếp cận "mobile-first"
@mixin make-media-query($dimension) {
    @media (min-width: $dimension) {
        @content;
    }
}

@mixin make-row-columns($infix: null) {
    // Thêm số 0 để có thể reset trên mobile
    .row-cols#{$infix}-auto > * {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .row-cols#{$infix}-#{$i} > * {
            flex: 0 0 auto;
            width: math.div(100%, $i);
        }
    }
}

@mixin make-columns($infix: null) {
    .col#{$infix} {
        flex: 1 0 0%;
    }

    .col#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
    }

    @for $i from 1 through $grid-columns {
        .col#{$infix}-#{$i} {
            flex: 0 0 auto;
            width: math.div(100%, $grid-columns) * $i;
        }
    }
}

@mixin make-offsets($infix: null) {
    @for $i from 0 to $grid-columns {
        .offset#{$infix}-#{$i} {
            margin-left: if($i > 0, math.div(100%, $grid-columns) * $i, 0);
        }
    }
}

@mixin make-gutters($infix: null) {
    @each $i, $ratio in $gutters {
        .g#{$infix}-#{$i},
        .gx#{$infix}-#{$i} {
            --grid-gutter-x: #{$grid-gutter-width * $ratio};
        }

        .g#{$infix}-#{$i},
        .gy#{$infix}-#{$i} {
            --grid-gutter-y: #{$grid-gutter-width * $ratio};
        }
    }
}

// Tạo các class cho mobile trước (không có infix)
@include make-row-columns();
@include make-columns();
@include make-offsets();
@include make-gutters();

// Tạo các class cho các breakpoint lớn hơn
@each $breakpoint, $dimension in $grid-breakpoints {
    $infix: "-#{$breakpoint}";

    @include make-media-query($dimension) {
        @include make-row-columns($infix);
        @include make-columns($infix);
        @include make-offsets($infix);
        @include make-gutters($infix);
    }
}
